from sklearn.model_selection import ParameterGrid
import tensorflow as tf
from tensorflow.keras import layers, models, regularizers
from tensorflow.keras.optimizers import Adam

def create_model(learning_rate=0.001, dropout_rate=0.5, num_filters=64, kernel_size=4, pooling_size=5, activation='relu'):

    model = models.Sequential()
    model.add(layers.Conv1D(num_filters, kernel_size, activation=activation, input_shape=(X_train.shape[1:])+tuple([1]), kernel_regularizer=regularizers.l2(0.04)))
    model.add(layers.MaxPooling1D(pooling_size))
    model.add(layers.Conv1D(num_filters, 2, activation=activation, kernel_regularizer=regularizers.l2(0.04)))
    model.add(layers.MaxPooling1D(pooling_size))

    model.add(layers.Flatten())
    model.add(layers.Dense(64, activation=activation, kernel_regularizer=regularizers.l2(0.04)))
    model.add(layers.Dropout(dropout_rate))
    model.add(layers.Dense(64, activation=activation, kernel_regularizer=regularizers.l2(0.03)))
    model.add(layers.Dense(32, activation=activation, kernel_regularizer=regularizers.l2(0.03)))
    model.add(layers.Dense(4, activation='softmax', kernel_regularizer=regularizers.l2(0.02)))
    optimizer = Adam(learning_rate=learning_rate)
    model.compile(optimizer=optimizer, loss='categorical_crossentropy', metrics=['accuracy'])

    return model

# Updated parameter grid
param_grid = {
    'batch_size': [16, 32, 64, 128],
    'learning_rate': [0.0001, 0.001, 0.01],
    'dropout_rate': [0.3, 0.4, 0.5],
    'num_filters': [32, 64, 128],
    'kernel_size': [2, 3, 4, 5]
}

# Rest of your code for grid search

best_score = 0
best_params = {}

for params in ParameterGrid(param_grid):
    model = create_model(learning_rate=params['learning_rate'], dropout_rate=params['dropout_rate'])
    history = model.fit(X_train, Y_train, epochs=20, batch_size=params['batch_size'], validation_split=0.2, verbose=0)
    
    # Evaluate model
    score = model.evaluate(X_test, Y_test, verbose=0)[1]  # Accuracy
    print(f"Params: {params} - Accuracy: {score}")
    
    if score > best_score:
        best_score = score
        best_params = params

print(f"Best Params: {best_params} with Accuracy: {best_score}")
